// Generated by CoffeeScript 1.7.1

/*
 * 简单的借口实现
 */

(function() {
  var AREAS_URL, CITYS_URL, PROVINCES_URL, SimpleWeather, areaid_f, areaid_v, assert, debuglog, fs, http, path, request, root_path, sign, types, _;

  debuglog = require('debug')("node-weather::simple");

  assert = require('assert');

  path = require('path');

  fs = require('fs');

  http = require('http');

  _ = require('underscore');

  sign = require('./utils/sign');

  request = require('request');

  types = require('./enums/types');

  root_path = path.resolve(__dirname, "../");

  areaid_v = null;

  areaid_f = null;

  PROVINCES_URL = "http://www.weather.com.cn/data/city3jdata/china.html";

  CITYS_URL = "http://www.weather.com.cn/data/city3jdata/provshi/";

  AREAS_URL = "http://www.weather.com.cn/data/city3jdata/station/";

  SimpleWeather = (function() {
    function SimpleWeather(url, appId, privateKey) {
      this.url = url;
      this.appId = appId;
      this.privateKey = privateKey;
      assert(this.url, "missing url");
      assert(this.appId, "missing appId");
      assert(this.privateKey, "missing privateKey");
      debuglog("instantiation");
      if (areaid_f == null) {
        areaid_f = JSON.parse(fs.readFileSync(path.join(root_path, "./lib/jsons/areaid_f.json")));
      }
      if (areaid_v == null) {
        areaid_v = JSON.parse(fs.readFileSync(path.join(root_path, "./lib/jsons/areaid_v.json")));
      }
    }

    SimpleWeather.prototype.loadAreaidF = function() {
      return areaid_f;
    };

    SimpleWeather.prototype.loadAreaidV = function() {
      return areaid_v;
    };

    SimpleWeather.prototype.loadAreaById = function(areaid) {
      return areaid_v[areaid];
    };

    SimpleWeather.prototype.loadIndex = function(areaid, callback) {
      this.loadByType(areaid, types.TYPE_INDEX, callback);
    };

    SimpleWeather.prototype.loadForecast3d = function(areaid, callback) {
      this.loadByType(areaid, types.TYPE_FORECAST3D, callback);
    };

    SimpleWeather.prototype.loadObserver = function(areaid, callback) {
      this.loadByType(areaid, types.TYPE_OBSERVE, callback);
    };

    SimpleWeather.prototype.loadByType = function(areaid, type, callback) {
      var date, key, public_key, url;
      assert(areaid, "missing areaid");
      assert(type, "missing type");
      assert(_.isFunction(callback, "missing callback"));
      date = new Date().Format("yyyyMMddhhmm");
      public_key = "" + this.url + "?areaid=" + areaid + "&type=" + type + "&date=" + date + "&appid=" + this.appId;
      key = sign.sign(public_key, this.privateKey);
      url = "" + this.url + "?areaid=" + areaid + "&type=" + type + "&date=" + date + "&appid=" + (this.appId.substr(0, 6)) + "&key=" + (sign.urlEncode(key));
      request(url, function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        try {
          body = JSON.parse(body) || {};
          callback(null, body);
        } catch (_error) {
          err = _error;
          callback(new Error("results data is error"));
          return;
        }
      });
    };

    SimpleWeather.prototype.loadProvinces = function(callback) {
      request(PROVINCES_URL, function(err, res, body) {
        var provinces;
        if (err != null) {
          return callback(err);
        }
        try {
          provinces = JSON.parse(body) || {};
          callback(null, provinces);
        } catch (_error) {
          err = _error;
          callback(new Error("results data is error"));
          return;
        }
      });
    };

    SimpleWeather.prototype.loadCitys = function(province, callback) {
      assert(province, "missing province");
      assert(_.isFunction(callback, "missing callback"));
      request("" + CITYS_URL + province + ".html", function(err, res, body) {
        var citys;
        if (err != null) {
          return callback(err);
        }
        try {
          citys = JSON.parse(body) || {};
          callback(null, citys);
        } catch (_error) {
          err = _error;
          callback(new Error("results data is error"));
          return;
        }
      });
    };

    SimpleWeather.prototype.loadAreas = function(province, city, isFull, callback) {
      assert(province, "missing province");
      assert(city, "missing city");
      assert(_.isFunction(callback, "missing callback"));
      request("" + AREAS_URL + province + city + ".html", function(err, res, body) {
        var areas, key, tests, val;
        if (err != null) {
          return callback(err);
        }
        try {
          tests = JSON.parse(body) || {};
          areas = {};
          if (!isFull) {
            areas = tests;
          } else {
            for (key in tests) {
              val = tests[key];
              if (city === '00') {
                areas["" + province + key + city] = val;
                continue;
              } else {
                areas["" + province + city + key] = val;
                continue;
              }
            }
          }
          callback(null, areas);
        } catch (_error) {
          err = _error;
          callback(new Error("results data is error"));
          return;
        }
      });
    };

    return SimpleWeather;

  })();

  module.exports = SimpleWeather;

}).call(this);
