// Generated by CoffeeScript 1.7.1
(function() {
  var SimpleWeather, appId, async, config, debuglog, httpUrl, privateKey, should, types;

  should = require("should");

  debuglog = require("debug")("node-weather::tests::simple_test");

  SimpleWeather = require('../index').SimpleWeather;

  types = require('../enums/types');

  config = require('./config');

  async = require('async');

  httpUrl = config.httpUrl;

  appId = config.appId;

  privateKey = config.privateKey;

  describe("test simple", function() {
    before(function() {});
    return describe("synthesize test", function() {
      return it("synthesize test", function(done) {
        var provinces, sw;
        this.timeout = 60000;
        sw = new SimpleWeather(httpUrl, appId, privateKey);
        provinces = ['10101', '10119'];
        return async.eachSeries(provinces, (function(_this) {
          return function(province, next) {
            return sw.loadCitys(province, function(err, body) {
              var citys, key, val;
              if (err != null) {
                console.log(err);
              }
              citys = [];
              for (key in body) {
                val = body[key];
                citys.push(key);
              }
              return async.eachSeries(citys, (function(_this) {
                return function(city, next) {
                  return sw.loadAreas(province, city, true, function(err, body) {
                    var areas;
                    if (err != null) {
                      console.log(err);
                    }
                    areas = [];
                    for (key in body) {
                      val = body[key];
                      areas.push(key);
                    }
                    return async.eachSeries(areas, function(area, next) {
                      return sw.loadByType(area, types.TYPE_FORECAST3D, function(err, body) {
                        if (err != null) {
                          console.log(err);
                        }
                        console.dir(body);
                        return next();
                      });
                    }, function(err) {
                      if (err != null) {
                        console.error(err);
                      }
                      return next();
                    });
                  });
                };
              })(this), (function(_this) {
                return function(err) {
                  if (err != null) {
                    console.error(err);
                  }
                  return next();
                };
              })(this));
            });
          };
        })(this), (function(_this) {
          return function(err) {
            if (err != null) {
              console.error(err);
            }
            return done();
          };
        })(this));
      });
    });
  });

}).call(this);
